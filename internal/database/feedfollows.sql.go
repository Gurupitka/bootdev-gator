// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feedfollows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS ( insert into feed_follows(id,user_id,feed_id,created_at, updated_at)
 values ($1,$2,$3,$4,$5) RETURNING id, user_id, feed_id, created_at, updated_at
)

SELECT iffy.id, iffy.user_id, iffy.feed_id, iffy.created_at, iffy.updated_at, f.name AS feed_name,u.name AS user_name
FROM inserted_feed_follow iffy
inner join users u on iffy.user_id = u.id
inner join feeds f on f.id = iffy.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedsForUser = `-- name: GetFeedsForUser :many
SELECT ff.id, ff.user_id, feed_id, ff.created_at, ff.updated_at, f.name, url, f.user_id, f.id, last_fetched_at, u.id, u.created_at, u.updated_at, u.name, f.name as feed_name, u.name as user_name
FROM feed_follows ff
INNER JOIN feeds f on f.ID = ff.feed_id
INNER JOIN users u on ff.user_id = u.id
where ff.user_id = $1
`

type GetFeedsForUserRow struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	FeedID        uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	UserID_2      uuid.UUID
	ID_2          uuid.UUID
	LastFetchedAt sql.NullTime
	ID_3          uuid.UUID
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	Name_2        string
	FeedName      string
	UserName      string
}

func (q *Queries) GetFeedsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsForUserRow
	for rows.Next() {
		var i GetFeedsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID_2,
			&i.ID_2,
			&i.LastFetchedAt,
			&i.ID_3,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name_2,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :exec
delete from feed_follows where user_id = $1 and feed_id = $2
`

type UnfollowFeedParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, arg.UserID, arg.FeedID)
	return err
}
